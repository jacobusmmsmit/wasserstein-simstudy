scale_x_log10() +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_ribbon(aes(x = ns, ymin = wp_emp_lci, ymax = wp_emp_uci), alpha = 0.3, fill = "#008ccc") +
geom_abline(intercept = coefs[1], slope = coefs[2], linetype = "dashed", size = 0.7) +
labs(x = "Number of Samples",
y = "Variance",
title=glue("Variance of Wasserstein-2 Estimator in ", d," Dimensions"),
subtitle = glue("Absolute value of gradient = ", as.character(round(-coefs[2], 3))))
output_dir = "outputs/"
save_plot_as = glue("wasserstein2_", d, "_plot.pdf")
ggsave(glue(output_dir, save_plot_as), device = "pdf", width = 5, height = 4)
}
for (d in 1:30){
print(glue("Dimension: ", d))
j <- 0
for (n in ns){
print(glue("No. samples: ", n))
wp_emp_p <- rep(NA, K)
j <- j+1
for (k in 1:K){
# 1.) Generate samples
muhat <- matrix(rnorm(n * d), nrow = d)
nuhat <- matrix(rnorm(n * d), nrow = d)
# wp_emp_p sort, diff, mean, it's somewhere bro just like find it
# 2.) Compute the cost matrix
cost_mat <- EvaluateSquaredCost(muhat, nuhat, 4L) # d(x, y) = L-q metric, Wasserstein-p norm # costMatrix(muhat, nuhat, q, p)
# cost_mat <- costMatrix(muhat, nuhat, q, p)
# 3.) Compute the distance from the cost matrix
# K samples, variance of wasserstein-p distance over 100 samples
wp_emp_p[k] <- SolveAssignmentNetworkflow(n, cost_mat)
}
wp_emp <- wp_emp_p^1/p
# 4.) Compute the variance
var_wp_emp[j] <- var(wp_emp)
var_wp_emp_p[j] <- var(wp_emp_p)
# 5.) Calculate bootstrap distribution
wp_boot <- rep(NA, R)
wp_boot_p <- rep(NA, R)
for (i in 1:R){
sample <- sample(wp_emp, K, replace = T)
wp_boot[i] <- var(sample)
wp_boot_p[i] <- var(sample^p)
}
# 6.) Calculate confidence intervals of original estimate
wp_boot_sd[j] <- sd(wp_boot)
wp_boot_p_sd[j] <- sd(wp_boot_p)
}
wp_emp_lci <- var_wp_emp - 2*wp_boot_sd
wp_emp_uci <- var_wp_emp + 2*wp_boot_sd
results <- bind_rows(results, tibble(d = d, ns, var_wp_emp, wp_emp_lci, wp_emp_uci))
# wp_emp_lci <- var_wp_emp_p - 2*wp_boot_p_sd
# wp_emp_uci <- var_wp_emp_p + 2*wp_boot_p_sd
# Plot variance against sample size
# Sample size = ns, variance = var_wp_emp
# Also plot wp_emp_lcu and uci in blue or smth idk
coefs <- lm(log10(var_wp_emp) ~ log10(ns))$coefficients
qplot(ns, var_wp_emp) +
theme_bw() +
scale_x_log10() +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_ribbon(aes(x = ns, ymin = wp_emp_lci, ymax = wp_emp_uci), alpha = 0.3, fill = "#008ccc") +
geom_abline(intercept = coefs[1], slope = coefs[2], linetype = "dashed", size = 0.7) +
labs(x = "Number of Samples",
y = "Variance",
title=glue("Variance of Wasserstein-2 Estimator in ", d," Dimensions"),
subtitle = glue("Absolute value of gradient = ", as.character(round(-coefs[2], 3))))
output_dir = "outputs/"
save_plot_as = glue("wasserstein2_", d, "_plot.pdf")
ggsave(glue(output_dir, save_plot_as), device = "pdf", width = 5, height = 4)
}
models
models = results %>%
group_by(d) %>%
do(model = lm(log10(var_wp_emp) ~ log10(ns), data = .)$coefficients[[2]]) %>%
mutate(c = unlist(model)) %>%
select(-model)
models
models2 <- models
results2 <- results
results
for (d in c(10)){
print(glue("Dimension: ", d))
j <- 0
for (n in ns){
print(glue("No. samples: ", n))
wp_emp_p <- rep(NA, K)
j <- j+1
for (k in 1:K){
# 1.) Generate samples
muhat <- matrix(rnorm(n * d), nrow = d)
nuhat <- matrix(rnorm(n * d), nrow = d)
# wp_emp_p sort, diff, mean, it's somewhere bro just like find it
# 2.) Compute the cost matrix
cost_mat <- EvaluateSquaredCost(muhat, nuhat, 4L) # d(x, y) = L-q metric, Wasserstein-p norm # costMatrix(muhat, nuhat, q, p)
# cost_mat <- costMatrix(muhat, nuhat, q, p)
# 3.) Compute the distance from the cost matrix
# K samples, variance of wasserstein-p distance over 100 samples
wp_emp_p[k] <- SolveAssignmentNetworkflow(n, cost_mat)
}
wp_emp <- wp_emp_p^1/p
# 4.) Compute the variance
var_wp_emp[j] <- var(wp_emp)
var_wp_emp_p[j] <- var(wp_emp_p)
# 5.) Calculate bootstrap distribution
wp_boot <- rep(NA, R)
wp_boot_p <- rep(NA, R)
for (i in 1:R){
sample <- sample(wp_emp, K, replace = T)
wp_boot[i] <- var(sample)
wp_boot_p[i] <- var(sample^p)
}
# 6.) Calculate confidence intervals of original estimate
wp_boot_sd[j] <- sd(wp_boot)
wp_boot_p_sd[j] <- sd(wp_boot_p)
}
wp_emp_lci <- var_wp_emp - 2*wp_boot_sd
wp_emp_uci <- var_wp_emp + 2*wp_boot_sd
results <- bind_rows(results, tibble(d = d, ns, var_wp_emp, wp_emp_lci, wp_emp_uci))
# wp_emp_lci <- var_wp_emp_p - 2*wp_boot_p_sd
# wp_emp_uci <- var_wp_emp_p + 2*wp_boot_p_sd
# Plot variance against sample size
# Sample size = ns, variance = var_wp_emp
# Also plot wp_emp_lcu and uci in blue or smth idk
coefs <- lm(log10(var_wp_emp) ~ log10(ns))$coefficients
qplot(ns, var_wp_emp) +
theme_bw() +
scale_x_log10() +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_ribbon(aes(x = ns, ymin = wp_emp_lci, ymax = wp_emp_uci), alpha = 0.3, fill = "#008ccc") +
geom_abline(intercept = coefs[1], slope = coefs[2], linetype = "dashed", size = 0.7) +
labs(x = "Number of Samples",
y = "Variance",
title=glue("Variance of Wasserstein-2 Estimator in ", d," Dimensions"),
subtitle = glue("Absolute value of gradient = ", as.character(round(-coefs[2], 3))))
output_dir = "outputs/"
save_plot_as = glue("wasserstein2_", d, "_plot.pdf")
ggsave(glue(output_dir, save_plot_as), device = "pdf", width = 5, height = 4)
}
results
resultsView())
View(results)
models <- results %>%
group_by(d) %>%
do(model = lm(log10(var_wp_emp) ~ log10(ns), data = .)$coefficients[[2]]) %>%
mutate(c = unlist(model)) %>%
select(-model)
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
models
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 1.2, shape = 3) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 1.2, shape = 2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 2, shape = 2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 2, shape = 4) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 2, shape = 1) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 4, shape = 1) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
3000**3
results
write_csv(results, "results.csv")
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 3, shape = 1) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 3, shape = 1) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 3, shape = 5) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 3, shape = 15) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 3, shape = 17) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, c)) +
geom_point(size = 3, shape = 16) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
models
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, -c)) +
geom_point(size = 3, shape = 16) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = )
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, -c)) +
geom_point(size = 3, shape = 16) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = "Rate of convergence of variance")
ggsave(glue(output_dir, "final_plot.pdf"), device = "pdf", width = 5, height = 4)
for (d in c(4)){
print(glue("Dimension: ", d))
j <- 0
for (n in ns){
print(glue("No. samples: ", n))
wp_emp_p <- rep(NA, K)
j <- j+1
for (k in 1:K){
# 1.) Generate samples
muhat <- matrix(rnorm(n * d), nrow = d)
nuhat <- matrix(rnorm(n * d), nrow = d)
# wp_emp_p sort, diff, mean, it's somewhere bro just like find it
# 2.) Compute the cost matrix
cost_mat <- EvaluateSquaredCost(muhat, nuhat, 4L) # d(x, y) = L-q metric, Wasserstein-p norm # costMatrix(muhat, nuhat, q, p)
# cost_mat <- costMatrix(muhat, nuhat, q, p)
# 3.) Compute the distance from the cost matrix
# K samples, variance of wasserstein-p distance over 100 samples
wp_emp_p[k] <- SolveAssignmentNetworkflow(n, cost_mat)
}
wp_emp <- wp_emp_p^1/p
# 4.) Compute the variance
var_wp_emp[j] <- var(wp_emp)
var_wp_emp_p[j] <- var(wp_emp_p)
# 5.) Calculate bootstrap distribution
wp_boot <- rep(NA, R)
wp_boot_p <- rep(NA, R)
for (i in 1:R){
sample <- sample(wp_emp, K, replace = T)
wp_boot[i] <- var(sample)
wp_boot_p[i] <- var(sample^p)
}
# 6.) Calculate confidence intervals of original estimate
wp_boot_sd[j] <- sd(wp_boot)
wp_boot_p_sd[j] <- sd(wp_boot_p)
}
wp_emp_lci <- var_wp_emp - 2*wp_boot_sd
wp_emp_uci <- var_wp_emp + 2*wp_boot_sd
results <- bind_rows(results, tibble(d = d, ns, var_wp_emp, wp_emp_lci, wp_emp_uci))
# wp_emp_lci <- var_wp_emp_p - 2*wp_boot_p_sd
# wp_emp_uci <- var_wp_emp_p + 2*wp_boot_p_sd
# Plot variance against sample size
# Sample size = ns, variance = var_wp_emp
# Also plot wp_emp_lcu and uci in blue or smth idk
coefs <- lm(log10(var_wp_emp) ~ log10(ns))$coefficients
qplot(ns, var_wp_emp) +
theme_bw() +
scale_x_log10() +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_ribbon(aes(x = ns, ymin = wp_emp_lci, ymax = wp_emp_uci), alpha = 0.3, fill = "#008ccc") +
geom_abline(intercept = coefs[1], slope = coefs[2], linetype = "dashed", size = 0.7) +
labs(x = "Number of Samples",
y = "Variance",
title=glue("Variance of Wasserstein-2 Estimator in ", d," Dimensions"),
subtitle = glue("Absolute value of gradient = ", as.character(round(-coefs[2], 3))))
output_dir = "outputs/"
save_plot_as = glue("wasserstein2_", d, "_plot.pdf")
ggsave(glue(output_dir, save_plot_as), device = "pdf", width = 5, height = 4)
}
models <- results %>%
group_by(d) %>%
do(model = lm(log10(var_wp_emp) ~ log10(ns), data = .)$coefficients[[2]]) %>%
mutate(c = unlist(model)) %>%
select(-model)
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, -c)) +
geom_point(size = 3, shape = 16) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = "Rate of convergence of variance")
for (d in c(7)){
print(glue("Dimension: ", d))
j <- 0
for (n in ns){
print(glue("No. samples: ", n))
wp_emp_p <- rep(NA, K)
j <- j+1
for (k in 1:K){
# 1.) Generate samples
muhat <- matrix(rnorm(n * d), nrow = d)
nuhat <- matrix(rnorm(n * d), nrow = d)
# wp_emp_p sort, diff, mean, it's somewhere bro just like find it
# 2.) Compute the cost matrix
cost_mat <- EvaluateSquaredCost(muhat, nuhat, 4L) # d(x, y) = L-q metric, Wasserstein-p norm # costMatrix(muhat, nuhat, q, p)
# cost_mat <- costMatrix(muhat, nuhat, q, p)
# 3.) Compute the distance from the cost matrix
# K samples, variance of wasserstein-p distance over 100 samples
wp_emp_p[k] <- SolveAssignmentNetworkflow(n, cost_mat)
}
wp_emp <- wp_emp_p^1/p
# 4.) Compute the variance
var_wp_emp[j] <- var(wp_emp)
var_wp_emp_p[j] <- var(wp_emp_p)
# 5.) Calculate bootstrap distribution
wp_boot <- rep(NA, R)
wp_boot_p <- rep(NA, R)
for (i in 1:R){
sample <- sample(wp_emp, K, replace = T)
wp_boot[i] <- var(sample)
wp_boot_p[i] <- var(sample^p)
}
# 6.) Calculate confidence intervals of original estimate
wp_boot_sd[j] <- sd(wp_boot)
wp_boot_p_sd[j] <- sd(wp_boot_p)
}
wp_emp_lci <- var_wp_emp - 2*wp_boot_sd
wp_emp_uci <- var_wp_emp + 2*wp_boot_sd
results <- bind_rows(results, tibble(d = d, ns, var_wp_emp, wp_emp_lci, wp_emp_uci))
# wp_emp_lci <- var_wp_emp_p - 2*wp_boot_p_sd
# wp_emp_uci <- var_wp_emp_p + 2*wp_boot_p_sd
# Plot variance against sample size
# Sample size = ns, variance = var_wp_emp
# Also plot wp_emp_lcu and uci in blue or smth idk
coefs <- lm(log10(var_wp_emp) ~ log10(ns))$coefficients
qplot(ns, var_wp_emp) +
theme_bw() +
scale_x_log10() +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_ribbon(aes(x = ns, ymin = wp_emp_lci, ymax = wp_emp_uci), alpha = 0.3, fill = "#008ccc") +
geom_abline(intercept = coefs[1], slope = coefs[2], linetype = "dashed", size = 0.7) +
labs(x = "Number of Samples",
y = "Variance",
title=glue("Variance of Wasserstein-2 Estimator in ", d," Dimensions"),
subtitle = glue("Absolute value of gradient = ", as.character(round(-coefs[2], 3))))
output_dir = "outputs/"
save_plot_as = glue("wasserstein2_", d, "_plot.pdf")
ggsave(glue(output_dir, save_plot_as), device = "pdf", width = 5, height = 4)
}
models <- results %>%
group_by(d) %>%
do(model = lm(log10(var_wp_emp) ~ log10(ns), data = .)$coefficients[[2]]) %>%
mutate(c = unlist(model)) %>%
select(-model)
# results2 <- results
# models2 <- models
models %>%
ggplot(aes(d, -c)) +
geom_point(size = 3, shape = 16) +
geom_line(size = 1.2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
theme_bw() +
labs(x = "Dimension of underlying spaces",
y = substitute(a*b*c, list(a = "c (Variance decays at rate  ", b = quote(frac(1, n^c)), c = " )")),
title = "Rate of convergence of variance")
ggsave(glue(output_dir, "final_plot.pdf"), device = "pdf", width = 5, height = 4)
results
models
results %>%
group_by(d) %>%
do(model = lm(log10(var_wp_emp) ~ log10(ns), data = .))
lms <- results %>%
group_by(d) %>%
do(model = lm(log10(var_wp_emp) ~ log10(ns), data = .))
lms
lms$model
lms$model[[1]]
lms$model[[1]]$terms
lms$model[[1]]
summary(lms$model[[1]])
lms
lms$model
lms$model[[1]]
summary(lms$model[[1]])
summary(lms$model[[1]])$coefficients
summary(lms$model[[1]])$coefficients[ , 2]
summary(lms$model[[1]])$coefficients[ , 2]$`log10(ns)`
coef(summary(lms$model[[1]]))
coef(summary(lms$model[[1]]))[, "Std. Error"]
coef(summary(lms$model[[1]]))[, "Std. Error"][2]
coef(summary(lms$model[[1]]))[, "Std. Error"]
coef(summary(lms$model[[1]]))[, "Std. Error"]
coef(summary(lms$model[[1]]))[, "Std. Error"][2]
1 + coef(summary(lms$model[[1]]))[, "Std. Error"][2]
unlist(coef(summary(lms$model[[1]]))[, "Std. Error"][2])
coef(summary(lms$model[[1]]))[, "Std. Error"][2]
coef(summary(lms$model[[1]]))[, "Std. Error"][2] %>% pull()
coef(summary(lms$model[[1]]))[, "Std. Error"][2]
coef(summary(lms$model[[1]]))[, "Std. Error"][2]["log10(ns)"]
coef(summary(lms$model[[1]]))[, "Std. Error"][2]
coef(summary(lms$model[[1]]))[, "Std. Error"][2] + 1500
coef(summary(lms$model[[1]]))[, "Std. Error"][2] + 1500/2
coef(summary(lms$model[[1]]))[, "Std. Error"][2]
1 + coef(summary(lms$model[[1]]))[, "Std. Error"][2]
write_csv(results, "results.csv")
